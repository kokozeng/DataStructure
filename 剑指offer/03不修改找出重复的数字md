## 题目描述

给定一个长度为 nn 的整数数组 `nums`，数组中所有的数字都在 0∼n−10∼n−1 的范围内。

数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。

请找出数组中任意一个重复的数字。

**注意**：如果某些数字不在 0∼n−10∼n−1 的范围内，或数组中不包含重复数字，则返回 -1；

#### 样例

```
给定 nums = [2, 3, 5, 4, 3, 2, 6, 7]。

返回 2 或 3。
```

## 思路

- 使用排序，但是排序就需要O(nlogn)的时间复杂度。
- 建一个哈希表，空间复杂度是O(n)。
- 数组遍历，时间复杂度是O(n)，空间复杂度是O(1)。
  - 首先遍历数组，如果存在某个数不在0到n-1的范围内，则返回-1。
  - 把每个数都放在对应的位置上，对数组进行交换的操作。
  - 如果nums[i]!=i：
    - 如果nums[nums[i]] == nums[i] 则直接返回重复的mums[i]
    - 如果不想等，则交换nums[i]和nums[nums[i]]

## C++ 代码

```c++
class Solution {
public:
    int duplicateInArray(vector<int>& nums) {
        int n = nums.size();
        for (auto x : nums)
            if (x < 0 || x >= n)
            {
                return -1;
            }
        for (int i = 0; i < n; i ++){
            while(nums[i] != i && nums[nums[i]] != nums[i]) swap(nums[i], nums[nums[i]]);
            if (nums[i] != i && nums[nums[i]] == nums[i]) return nums[i];
        }
        return -1;
    }
};
```


```c++
# 剑指offer题解
class Solution {
public:
    int duplicateInArray(vector<int>& nums) {
        int n = nums.size();
        for (auto x : nums)
            if (x < 0 || x >= n)
            {
                return -1;
            }
        for (int i = 0; i < n; i ++){
            while(nums[i] != i) {
                if (nums[i] == nums[nums[i]]) 
                {
                    return nums[i];
                }
                swap(nums[i], nums[nums[i]]);
            }
        }
        return -1;
    }
};
```

## 考察点

- 一维数组在内存中占据连续的空间，因此我们可以根据下标定位对应的元素。